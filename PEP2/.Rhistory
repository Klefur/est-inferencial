datos[["Fisica"]]
View(datos)
matriz <- matriz %>% pivot_longer(c("Calculo", "Algebra", "Fisica"),
names_to = "Ramos",
values_to = "Resultado")
matriz
matriz <- matriz %>% pivot_longer(c("hormiga", "anelin", "genetico"),
names_to = "Ramos",
values_to = "Resultado")
matriz
matriz[["genetico"]]
instancia = 1:4
hormiga = c(0, 1, 1 ,0)
anelin = c(1, 1, 1, 1)
genetico = c(0, 0, 0, 1)
matriz = data.frame(instancia, hormiga, anelin, genetico)
matriz <- matriz %>% pivot_longer(c("hormiga", "anelin", "genetico"),
names_to = "Ramos",
values_to = "Resultado")
matriz
matriz[["genetico"]]
# matriz de datos.
datos <- read_excel("EP04 Datos.xls")
datos = as.data.frame(datos)
# matriz de datos.
datos <- read_excel("EP04 Datos.xls")
datos <- datos %>% pivot_longer(c("Calculo", "Algebra", "Fisica"),
names_to = "Ramos",
values_to = "Resultado")
datos[["Instancia"]] <- factor(datos[["Calculo"]])
# matriz de datos.
datos <- read_excel("EP04 Datos.xls")
datos <- datos %>% pivot_longer(c("Calculo", "Algebra", "Fisica"),
names_to = "Ramos",
values_to = "Resultado")
View(datos)
datos
datos[["Id"]] <- factor(datos[["Id"]])
datos[["Ramos"]] <- factor(datos[["Ramos"]])
View(datos)
# -----------------------------------------------------------------------------
# Pregunta 4
library(readxl)
library(tidyverse)
library(RVAideMemoire)
library(rcompanion)
library(dplyr)
# matriz de datos.
datos <- read_excel("EP04 Datos.xls")
install.packages("RVAideMemoire")
install.packages("mixOmics")
update.packages(checkBuilt=TRUE, ask=FALSE)
# -----------------------------------------------------------------------------
# Pregunta 4
library(readxl)
library(tidyverse)
library(RVAideMemoire)
library(dplyr)
# -----------------------------------------------------------------------------
# Pregunta 4
library(readxl)
library(tidyverse)
library(RVAideMemoire)
library(rcompanion)
install.packages("RVAideMemoire")
# -----------------------------------------------------------------------------
# Pregunta 4
library(readxl)
library(tidyverse)
library(RVAideMemoire)
library(rcompanion)
install.packages("mixOmics")
# -----------------------------------------------------------------------------
# Pregunta 4
library(readxl)
library(tidyverse)
library(RVAideMemoire)
library(rcompanion)
set.seed(347)
alfa <- 0.05
# matriz de datos.
datos <- read_excel("EP04 Datos.xls")
datos <- datos %>% pivot_longer(c("Calculo", "Algebra", "Fisica"),
names_to = "Ramos",
values_to = "Resultado")
datos[["Id"]] <- factor(datos[["Id"]])
datos[["Ramos"]] <- factor(datos[["Ramos"]])
# Hacer prueba Q de Cochran.
prueba <- cochran
library(RVAideMemoire)
install.packages("RVAideMemoire")
install.packages("RVAideMemoire_0.9-83-3.tar.gz",repos=NULL)
deps <- c("ade4", "car", "cramer", "dunn.test", "FactoMineR",
"lme4", "mixOmics", "multcompView", "pls", "pspearman",
"statmod", "vegan")
install.packages(deps)
install.packages(deps)
install.packages("RVAideMemoire")
install.packages("RVAideMemoire")
install.packages("RVAideMemoire")
S
install.packages("mixOmics")
install.packages("BiocManager")
BiocManager::install('mixOmics')
install.packages("RVAideMemoire")
# -----------------------------------------------------------------------------
# Pregunta 4
library(readxl)
library(tidyverse)
library(RVAideMemoire)
library(rcompanion)
library(tidyverse)
library(RVAideMemoire)
library(rcompanion)
set.seed(347)
alfa <- 0.05
# matriz de datos.
datos <- read_excel("EP04 Datos.xls")
datos <- datos %>% pivot_longer(c("Calculo", "Algebra", "Fisica"),
names_to = "Ramos",
values_to = "Resultado")
datos[["Id"]] <- factor(datos[["Id"]])
datos[["Ramos"]] <- factor(datos[["Ramos"]])
# Hacer prueba Q de Cochran.
prueba <- cochran.qtest(Resultado ~ Ramos | Id,
data = datos, alpha = alfa)
# con una significancia de 0.05, la investigacion no presenta sufienciente
print(prueba)
getwd
getwd()
archivo <- read.csv2("EP05 Datos.csv", sep = ";")
View(archivo)
archivo <- read.csv2("EP05 Datos.csv", sep = ".")
View(archivo)
archivo <- read.csv2("EP05 Datos.csv", sep = ",")
View(archivo)
quimica <- archivo[["quimica"]]
quimica <- archivo[archivo$area %in% c("Química"), ]
View(quimica)
View(quimica)
quimica <- quimica[quimica$dificultad %in% c("Baja"), ]
View(quimica)
quimica <- archivo[archivo$area %in% c("Química"), ]
View(quimica)
quimica_baja <- quimica[quimica$dificultad %in% c("Baja"), ]
instancia <- factor(1:200)
quimica_baja <- quimica[quimica$dificultad %in% c("Baja"), ]
quimica_media <- quimica[quimica$dificultad %in% c("Media"), ]
quimica_alta <- quimica[quimica$dificultad %in% c("Alta"), ]
datos <- data.frame(instancia, quimica_baja, quimica_media, quimica_alta)
View(datos)
quimica_baja <- quimica[quimica$dificultad %in% c("Baja"), ]$tiempo
datos <- data.frame(instancia, quimica_baja, quimica_media, quimica_alta)
View(datos)
quimica <- archivo[archivo$area %in% c("Química"), ]
instancia <- factor(1:200)
quimica_baja <- quimica[quimica$dificultad %in% c("Baja"), ]$tiempo
quimica_media <- quimica[quimica$dificultad %in% c("Media"), ]$tiempo
quimica_alta <- quimica[quimica$dificultad %in% c("Alta"), ]$tiempo
datos <- data.frame(instancia, quimica_baja, quimica_media, quimica_alta)
View(datos)
datos
library(tidyverse)
library(ggpubr)
library(ez)
install.packages("ez")
datos <- datos %>% pivot_longer(c("Baja", "Media", "Alta"),
names_to = "Química", values_to = "tiempo")
Baja <- quimica[quimica$dificultad %in% c("Baja"), ]$tiempo
Media <- quimica[quimica$dificultad %in% c("Media"), ]$tiempo
Alta <- quimica[quimica$dificultad %in% c("Alta"), ]$tiempo
datos <- data.frame(instancia, Baja, Media, Alta)
datos <- datos %>% pivot_longer(c("Baja", "Media", "Alta"),
names_to = "Química", values_to = "tiempo")
datos <- datos %>% pivot_longer(c("Baja", "Media", "Alta"),
names_to = "Dificultad", values_to = "tiempo")
archivo <- read.csv2("EP05 Datos.csv", sep = ",")
quimica <- archivo[archivo$area %in% c("Química"), ]
instancia <- factor(1:200)
Baja <- quimica[quimica$dificultad %in% c("Baja"), ]$tiempo
Media <- quimica[quimica$dificultad %in% c("Media"), ]$tiempo
Alta <- quimica[quimica$dificultad %in% c("Alta"), ]$tiempo
datos <- data.frame(instancia, Baja, Media, Alta)
datos <- datos %>% pivot_longer(c("Baja", "Media", "Alta"),
names_to = "Dificultad", values_to = "tiempo")
datos[["Dificultad"]] <- factor(datos[["Dificultad"]])
datos
View(datos)
View(quimica)
View(datos)
View(quimica)
datos <- data.frame(instancia, Baja, Media, Alta)
datos <- datos %>% pivot_longer(c("Baja", "Media", "Alta"),
names_to = "dificultad", values_to = "tiempo")
datos[["dificultad"]] <- factor(datos[["dificultad"]])
g <- ggqqplot(datos, x = "tiempo",
y = "dificultad",
color = "dificultad")
g <- g + facet_wrap(~ area)
print(g)
g <- g + facet_wrap(~ dificultad)
g <- ggqqplot(datos, x = "tiempo",
y = "dificultad",
color = "dificultad")
g <- g + facet_wrap(~ dificultad)
print(g)
install.packages("ez")
library(ez)
ezANOVA(datos)
ezANOVA(data = datos, dv = tiempo, within = dificultad,
wid = instancia, return_aov = TRUE)
print(summary(prueba$aov)
print(summary(prueba$aov))
print(summary(prueba$aov))
prueba <- ezANOVA(data = datos, dv = tiempo, within = dificultad,
wid = instancia, return_aov = TRUE)
print(summary(prueba$aov))
archivo <- read.csv2("EP05 Datos.csv", sep = ",")
datos <- archivo[archivo$area %in% c("Química"), ]
g <- ggqqplot(datos, x = "tiempo",
y = "dificultad",
color = "dificultad")
g <- g + facet_wrap(~ dificultad)
print(g)
prueba <- ezANOVA(data = datos, dv = tiempo, within = dificultad,
wid = instancia, return_aov = TRUE)
print(summary(prueba$aov))
print(prueba[["Mauchly's Test for Sphericity"]])
print(prueba$`Mauchly's Test for Sphericity`)
print(prueba$`Sphericity Corrections`)
source("~/Escritorio/Code/est-inferencial/E06/EI-EP06-respuesta-equipo-3.R")
library(tidyverse)
library(ggpubr)
library(ez)
library(tidyverse)
library(ggpubr)
library(ez)
archivo <- read.csv2("EP05 Datos.csv", sep = ",")
quimica <- archivo[archivo$area %in% c("Química"), ]
instancia <- factor(1:200)
Baja <- quimica[quimica$dificultad %in% c("Baja"), ]$tiempo
Media <- quimica[quimica$dificultad %in% c("Media"), ]$tiempo
Alta <- quimica[quimica$dificultad %in% c("Alta"), ]$tiempo
datos <- data.frame(instancia, Baja, Media, Alta)
datos <- datos %>% pivot_longer(c("Baja", "Media", "Alta"),
names_to = "dificultad", values_to = "tiempo")
datos[["dificultad"]] <- factor(datos[["dificultad"]])
g <- ggqqplot(datos, x = "tiempo",
y = "dificultad",
color = "dificultad")
g <- g + facet_wrap(~ dificultad)
print(g)
prueba <- ezANOVA(data = datos, dv = tiempo, within = dificultad,
wid = instancia, return_aov = TRUE)
print(summary(prueba$aov))
print(prueba[["Mauchly's Test for Sphericity"]])
print(prueba$`Sphericity Corrections`)
View(datos)
View(archivo)
holm <- pairwise.t.test(datos[["tiempo"]], datos[["dificultad"]], p.adj = "holm"
, paired = TRUE)
print(holm)
source("~/Escritorio/Code/est-inferencial/E06/EI-EP06-respuesta-equipo-3.R")
source("~/Escritorio/Code/est-inferencial/E06/EI-EP06-respuesta-equipo-3.R")
setwd("~/Escritorio/Code/est-inferencial/PEP2")
archivo <- read.csv2("EI-2023-2-PE2-Datos-Equipo01.csv")
archivo <- read.csv2("EI-2023-2-PE2-Datos-Equipo01.csv")
View(archivo)
archivo <- read.csv2("EI-2023-2-PE2-Datos-Equipo01.csv", sep = ".")
View(archivo)
archivo <- read.csv2("EI-2023-2-PE2-Datos-Equipo01.csv", sep = ",")
View(archivo)
entrena <- head(archivo, 40)
prueba <- tail(archivo, 10)
archivo <- read.csv2("EI-2023-2-PE2-Datos-Equipo01.csv", sep = ",")
set.seed(300)
# Definimos los conjuntos de entrenamiento y de prueba
entrenamiento <- head(archivo, 40)
prueba <- tail(archivo, 10)
modelo <- glm(X1 ~ ., family = binomial(link = "logit"), data = entrenamiento)
modelo <- glm(X1 ~ X2 + X3, family = binomial(link = "logit"), data = entrenamiento)
modelo <- glm(X1 ~ X2 + X3, data = entrenamiento)
summary(modelo)
modelo <- glm(X1 ~ ., data = entrenamiento)
summary(modelo)
# Evaluación de las condiciones para RLM en el gráfico
ggplot(muestra2, aes(x = X1, y = X2)) +
geom_point() +
geom_smooth(method = lm)
library(lmtest)
library(car)
library(ggpubr)
library(ggplot2)
library(dplyr)
library(boot)
archivo <- read.csv2("EI-2023-2-PE2-Datos-Equipo01.csv", sep = ",")
set.seed(300)
# Definimos los conjuntos de entrenamiento y de prueba
entrenamiento <- head(archivo, 40)
prueba <- tail(archivo, 10)
# Evaluación de las condiciones para RLM en el gráfico
ggplot(entrenamiento, aes(x = X1, y = X2)) +
geom_point() +
geom_smooth(method = lm)
# Evaluación de las condiciones para RLM en el gráfico
ggplot(entrenamiento, aes(x = X1, y = X3)) +
geom_point() +
geom_smooth(method = lm)
# Evaluación de las condiciones para RLM en el gráfico
ggplot(entrenamiento, aes(x = X1, y = X4)) +
geom_point() +
geom_smooth(method = lm)
# Evaluación de las condiciones para RLM en el gráfico
ggplot(entrenamiento, aes(x = X1, y = X5)) +
geom_point() +
geom_smooth(method = lm)
# Evaluación de las condiciones para RLM en el gráfico
ggplot(entrenamiento, aes(x = X1, y = X6)) +
geom_point() +
geom_smooth(method = lm)
# Evaluación de las condiciones para RLM en el gráfico
ggplot(entrenamiento, aes(x = X1, y = X7)) +
geom_point() +
geom_smooth(method = lm)
# Evaluación de las condiciones para RLM en el gráfico
ggplot(entrenamiento, aes(x = X1, y = X8)) +
geom_point() +
geom_smooth(method = lm)
# Evaluación de las condiciones para RLM en el gráfico
ggplot(entrenamiento, aes(x = X1, y = X9)) +
geom_point() +
geom_smooth(method = lm)
# Creamos el modelo de RML
nulo <- lm(X1 ~ 1, data = entrenamiento)
completo <- lm(X1 ~ ., data = entrenamiento)
# Selección hacia adelante utilizando AIC como criterio
modelo_seleccionado <- step(nulo, direction="forward", scope= list(upper = completo), trace = 0)
summary(modelo_seleccionado)
help(step)
# Selección hacia adelante utilizando AIC como criterio
modelo_seleccionado <- step(nulo, scope= list(upper = completo), trace = 0)
summary(modelo_seleccionado)
summary(completo)
# Comprobamos la multilinealidad
vifs <- vif(modelo_seleccionado)
vifs
# Comprobamos la multilinealidad
vifs <- vif(completo)
vifs
# Observamos que las variables X2 y X3 nos dan un problema de multicolinealidad
# por lo que las eliminamos del modelo
modelo2 <- lm(X1 ~ . - X2 -X3, data = entrenamiento)
summary(modelo2)
vifs
# Comprobamos la multilinealidad
vifs2 <- vif(completo)
vifs2
# Comprobamos la multilinealidad
vifs2 <- vif(modelo2)
vifs2
1/vifs
vifs2
1/vifs2
# Homocedasticidad Gráfico
plot(modelo2$fitted.values, resid(modelo2), xlab="Fitted values", ylab="Residuals", main="Homoscedasticity Check")
abline(h=0, col="red")
# Normalidad de los residuos
qqnorm(modelo$residuals)
qqline(modelo$residuals, col="red")
# Normalidad de los residuos
qqnorm(modelo2$residuals)
qqline(modelo2$residuals, col="red")
# Evaluación del poder predictivo del modelo con validación cruzada
# Error con datos de entrenamiento
print(mean(modelo$residuals ** 2))
# Evaluación del poder predictivo del modelo con validación cruzada
# Error con datos de entrenamiento
print(mean(modelo2$residuals ** 2))
# Normalidad de los residuos
qqnorm(modelo2$residuals)
qqline(modelo2$residuals, col="red")
plot(modelo2$residuals)
# Homocedasticidad Gráfico
plot(modelo2$fitted.values, resid(modelo2), xlab="Fitted values", ylab="Residuals", main="Homoscedasticity Check")
abline(h=0, col="red")
plot(modelo2)
# Como X4 nos entrega un valor muy alto tambien lo eliminamos
modelo3 <- lm(X1 ~ . - X2 - X3 - X4, data = entrenamiento)
summary(modelo3)
# Comprobamos la multilinealidad
vifs3 <- vif(modelo3)
vifs3
1/vifs3
# Homocedasticidad Gráfico
plot(modelo3$fitted.values, resid(modelo2), xlab="Fitted values", ylab="Residuals", main="Homoscedasticity Check")
abline(h=0, col="red")
# Normalidad de los residuos
qqnorm(modelo3$residuals)
qqline(modelo3$residuals, col="red")
# Evaluación del poder predictivo del modelo con validación cruzada
# Error con datos de entrenamiento
print(mean(modelo2$residuals ** 2))
# Evaluación del poder predictivo del modelo con validación cruzada
# Error con datos de entrenamiento
print(mean(modelo3$residuals ** 2))
# Parte de RML
nulo <- lm(X1 ~ 1, data = entrenamiento)
completo <- lm(X1 ~ ., data = entrenamiento)
# Selección hacia adelante utilizando AIC como criterio
modelo_seleccionado <- step(nulo, direction="forward", scope= list(upper = completo), trace = 0)
summary(modelo_seleccionado)
# Linealidad
plot(muestra2$Navel.Girth, modelo_seleccionado$fitted.values, xlab="Navel Girth", ylab="Fitted values", main="Linearity Check")
abline(lm(modelo_seleccionado$fitted.values ~ muestra2$Navel.Girth), col="red")
# Selección hacia adelante utilizando AIC como criterio
modelo_seleccionado <- step(nulo, direction="forward", scope= list(upper = completo), trace = 0)
summary(modelo_seleccionado)
# Linealidad
plot(muestra2$Navel.Girth, modelo_seleccionado$fitted.values, xlab="Navel Girth", ylab="Fitted values", main="Linearity Check")
abline(lm(modelo_seleccionado$fitted.values ~ muestra2$Navel.Girth), col="red")
# Linealidad
plot(entrenamiento$X1, modelo_seleccionado$fitted.values, xlab="Navel Girth", ylab="Fitted values", main="Linearity Check")
abline(lm(modelo_seleccionado$fitted.values ~ muestra2$Navel.Girth), col="red")
abline(lm(modelo_seleccionado$fitted.values ~ entrenamiento$X1), col="red")
# Comprobar la multilinealidad
vifs <- vif(modelo_seleccionado)
vifs
1/vifs
print(mean(modelo_seleccionado$residuals ** 2))
plot(modelo_seleccionado)
View(modelo_seleccionado)
1/vifs2
# Homocedasticidad
ncvTest(modelo_seleccionado)
predicciones <- predict(modelo2, prueba)
# Comprobar independencia de los residuos
durbinWatsonTest(modelo_seleccionado)
# Comprobar normalidad de los residuos
shapiro.test(modelo_seleccionado$residuals)
# Homocedasticidad Gráfico
plot(modelo2$fitted.values, resid(modelo2), xlab="Fitted values", ylab="Residuals", main="Homoscedasticity Check")
abline(h=0, col="red")
# Homocedasticidad
ncvTest(modelo_seleccionado)
predicciones <- predict(modelo2, prueba)
# Calcular error
error <- archivo$X1 - predicciones
print(mean(error ** 2))
mean(error ** 2) / mean(modelo2$residuals ** 2)
# Comprobar independencia de los residuos
durbinWatsonTest(modelo2)
# Comprobar normalidad de los residuos
shapiro.test(modelo2$residuals)
# Homocedasticidad
ncvTest(modelo2)
# Evaluación del poder predictivo del modelo con validación cruzada
# Error con datos de entrenamiento
mean(modelo2$residuals ** 2)
predicciones <- predict(modelo2, prueba)
# Calcular error
error <- archivo$X1 - predicciones
mean(error ** 2)
mean(error ** 2) / mean(modelo2$residuals ** 2)
#PEP2 Equipo 1
library(lmtest)
library(car)
library(ggpubr)
library(ggplot2)
library(dplyr)
library(boot)
archivo <- read.csv2("EI-2023-2-PE2-Datos-Equipo01.csv", sep = ",")
set.seed(300)
# Definimos los conjuntos de entrenamiento y de prueba
entrenamiento <- head(archivo, 40)
prueba <- tail(archivo, 10)
# Creamos el modelo de RML con tadas la variables
completo <- lm(X1 ~ ., data = entrenamiento)
summary(completo)
# Comprobamos la multilinealidad
vifs <- vif(completo)
vifs
1/vifs
# Observamos que las variables X2 y X3 nos dan un problema de multicolinealidad
# por lo que las eliminamos del modelo
modelo2 <- lm(X1 ~ . - X2 -X3, data = entrenamiento)
summary(modelo2)
# Comprobamos la multilinealidad
vifs2 <- vif(modelo2)
vifs2
1/vifs2
# Comprobar independencia de los residuos
durbinWatsonTest(modelo2)
# Comprobar normalidad de los residuos
shapiro.test(modelo2$residuals)
# Homocedasticidad
ncvTest(modelo2)
# Homocedasticidad
ncvTest(modelo2)
# Normalidad de los residuos
qqnorm(modelo2$residuals)
qqline(modelo2$residuals, col="red")
vifs
plot(modelo2)
help(shapiro.test)
# Homocedasticidad Gráfico
plot(modelo2$fitted.values, resid(modelo2), xlab="Fitted values", ylab="Residuals", main="Homoscedasticity Check")
abline(h=0, col="red")
# Homocedasticidad
ncvTest(modelo2)
# Normalidad de los residuos
qqnorm(modelo2$residuals)
qqline(modelo2$residuals, col="red")
