wid = instancia, return_aov = TRUE)
print(summary(prueba$aov)
print(summary(prueba$aov))
print(summary(prueba$aov))
prueba <- ezANOVA(data = datos, dv = tiempo, within = dificultad,
wid = instancia, return_aov = TRUE)
print(summary(prueba$aov))
archivo <- read.csv2("EP05 Datos.csv", sep = ",")
datos <- archivo[archivo$area %in% c("Química"), ]
g <- ggqqplot(datos, x = "tiempo",
y = "dificultad",
color = "dificultad")
g <- g + facet_wrap(~ dificultad)
print(g)
prueba <- ezANOVA(data = datos, dv = tiempo, within = dificultad,
wid = instancia, return_aov = TRUE)
print(summary(prueba$aov))
print(prueba[["Mauchly's Test for Sphericity"]])
print(prueba$`Mauchly's Test for Sphericity`)
print(prueba$`Sphericity Corrections`)
source("~/Escritorio/Code/est-inferencial/E06/EI-EP06-respuesta-equipo-3.R")
library(tidyverse)
library(ggpubr)
library(ez)
library(tidyverse)
library(ggpubr)
library(ez)
archivo <- read.csv2("EP05 Datos.csv", sep = ",")
quimica <- archivo[archivo$area %in% c("Química"), ]
instancia <- factor(1:200)
Baja <- quimica[quimica$dificultad %in% c("Baja"), ]$tiempo
Media <- quimica[quimica$dificultad %in% c("Media"), ]$tiempo
Alta <- quimica[quimica$dificultad %in% c("Alta"), ]$tiempo
datos <- data.frame(instancia, Baja, Media, Alta)
datos <- datos %>% pivot_longer(c("Baja", "Media", "Alta"),
names_to = "dificultad", values_to = "tiempo")
datos[["dificultad"]] <- factor(datos[["dificultad"]])
g <- ggqqplot(datos, x = "tiempo",
y = "dificultad",
color = "dificultad")
g <- g + facet_wrap(~ dificultad)
print(g)
prueba <- ezANOVA(data = datos, dv = tiempo, within = dificultad,
wid = instancia, return_aov = TRUE)
print(summary(prueba$aov))
print(prueba[["Mauchly's Test for Sphericity"]])
print(prueba$`Sphericity Corrections`)
View(datos)
View(archivo)
holm <- pairwise.t.test(datos[["tiempo"]], datos[["dificultad"]], p.adj = "holm"
, paired = TRUE)
print(holm)
source("~/Escritorio/Code/est-inferencial/E06/EI-EP06-respuesta-equipo-3.R")
source("~/Escritorio/Code/est-inferencial/E06/EI-EP06-respuesta-equipo-3.R")
datos1 <- archivo %>% filter(edad > 18 & edad < 30)
setwd("~/Escritorio/Code/est-inferencial/E08")
library(dplyr)
archivo = read.csv2("EP08 Datos CASEN 2017.csv", fileEncoding = "latin1")
datos1 <- archivo %>% filter(edad > 18 & edad < 30)
datos1 <- datos1 %>% filter(region == "Región de Coquimbo" |
region == "Región Metropolitana de Santiago")
datos1 <- datos1 %>% filter(r16e == "Sí" | r16e == "No")
tieneTele <- datos1$r16e
datos2_20_30 <- archivo %>% filter(edad > 20 & edad < 30 & sexo == "Mujer")
datos2_40_50 <- archivo %>% filter(edad > 40 & edad < 50 & sexo == "Mujer")
set.seed(123)
library(dplyr)
archivo = read.csv2("EP08 Datos CASEN 2017.csv", fileEncoding = "latin1")
datos1 <- archivo %>% filter(edad > 18 & edad < 30)
datos1 <- datos1 %>% filter(region == "Región de Coquimbo" |
region == "Región Metropolitana de Santiago")
datos1 <- datos1 %>% filter(r16e == "Sí" | r16e == "No")
tieneTele <- datos1$r16e
datos2_20_30 <- archivo %>% filter(edad > 20 & edad < 30 & sexo == "Mujer")
datos2_40_50 <- archivo %>% filter(edad > 40 & edad < 50 & sexo == "Mujer")
sample(datos1, 140)
sample(datos1, size = 140)
View(datos1)
sample(datos1$id.vivienda, 150)
datos1[muestra]
datos1[muestra == datos1$id.vivienda]
muestra <- datos1$id.vivienda[muestra]
muestra <- sample(datos1$id.vivienda, 150)
muestra <- datos1$id.vivienda[muestra]
muestra <- datos1$id.vivienda[indices]
indices <- sample(1:613, 150)
muestra <- datos1$id.vivienda[indices]
muestra <- datos1[indices]
datos1 <- archivo %>% filter(edad > 18 & edad < 30)
datos1 <- datos1 %>% filter(region == "Región de Coquimbo" |
region == "Región Metropolitana de Santiago")
datos1 <- datos1 %>% filter(r16e == "Sí" | r16e == "No")
tieneTele <- datos1$r16e
indices <- sample(1:613, 150)
muestra <- datos1$r16e[indices]
datos_metropolitana <-datos1 %>% filter(region == "Región Metropolitana de Santiago")
datos_coquimbo <- datos1 %>% filter(region == "Región de Coquimbo")
indices1 <- sample(1:424, 140)
indices2 <- sample(1:189, 140)
muestra_metropolitana <- datos1$r16e[indices1]
muestra_coquimbo <- datos1$r16e[indices2]
library(dplyr)
archivo = read.csv2("EP08 Datos CASEN 2017.csv", fileEncoding = "latin1")
obtiene_permutacion <- function (i , muestra_1 , muestra_2) {
n_1 <- length ( muestra_1)
combinada <- c ( muestra_1 , muestra_2)
n <- length ( combinada )
permutacion <- sample ( combinada , n , replace = FALSE )
nueva_1 <- permutacion [1: n_1]
nueva_2 <- permutacion [( n_1+1) : n ]
return ( list ( nueva_1 , nueva_2) )
}
calcular_diferencia <- function ( muestras , FUN ) {
muestra_1 <- muestras[[1]]
muestra_2 <- muestras[[2]]
diferencia <- FUN ( muestra_1) - FUN (muestra_2)
return ( diferencia )
}
calcular_valor_p <- function ( distribucion , valor_observado ,
repeticiones , alternative ) {
if ( alternative == " two . sided " ) {
numerador <- sum ( abs ( distribucion ) > abs ( valor_observado ) ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if ( alternative == " greater " ) {
numerador <- sum ( distribucion > valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else {
numerador <- sum ( distribucion < valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return ( valor_p )
}
# Funci ó n para graficar una distribuci ó n .
# Argumentos :
# - distribucion : distribuci ó n nula del estad í stico de inter é s .
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot .
graficar_distribucion <- function ( distribucion , ...) {
observaciones <- data.frame( distribucion )
histograma <- gghistogram( observaciones , x = " distribucion " ,
xlab = " Estad í stico de inter é s " ,
ylab = " Frecuencia " , bins = 30 , ...)
qq <- ggqqplot( observaciones , x = " distribucion " , ...)
# Crear una ú nica figura con todos los gr á ficos de dispersi ó n .
figura <- ggarrange ( histograma , qq , ncol = 2 , nrow = 1)
print ( figura )
}
# Funci ó n para hacer la prueba de permutaciones .
# Argumentos :
# - muestra _1 , muestra _2: vectores num é ricos con las muestras a comparar .
# - repeticiones : cantidad de permutaciones a realizar .
# - FUN : funci ó n del estad í stico E para el que se calcula la diferencia .
# - alternative : tipo de hip ó tesis alternativa . " two . sided " para
# hip ó tesis bilateral , " greater " o " less " para hip ó tesis unilaterales .
# - plot : si es TRUE , construye el gr á fico de la distribuci ó n generada .
# - ...: otros argumentos a ser entregados a graficar _ distribucion .
contrastar_hipotesis_permutaciones <- function ( muestra_1 , muestra_2 ,
repeticiones , FUN ,
alternative , plot , ...) {
cat ( " Prueba de permutaciones \ n \ n " )
cat ( " Hip ó tesis alternativa : " , alternative , " \ n " )
observado <- calcular_diferencia ( list ( muestra_1 , muestra_2) , FUN )
cat ( " Valor observado : " , observado , " \ n " )
n_1 <- length ( muestra_1)
# Generar permutaciones .
permutaciones <- lapply (1: repeticiones , obtiene_permutacion , muestra_1 ,
muestra_2)
# Generar la distribuci ó n .
distribucion <- sapply ( permutaciones , calcular_diferencia , FUN )
# Graficar la distribuci ó n .
if ( plot ) {
graficar_distribucion ( distribucion , ...)
}
# Calcular el valor p .
valor_p <- calcular_valor_p ( distribucion , observado , repeticiones ,
alternative )
cat ( " Valor p : " , valor_p , " \ n \ n " )
}
datos1 <- archivo %>% filter(edad > 18 & edad < 30)
datos1 <- datos1 %>% filter(r16e == "Sí" | r16e == "No")
datos_metropolitana <-datos1 %>% filter(region == "Región Metropolitana de Santiago")
datos_coquimbo <- datos1 %>% filter(region == "Región de Coquimbo")
set.seed(123)
indices1 <- sample(1:424, 140)
indices2 <- sample(1:189, 140)
muestra_metropolitana <- datos1$r16e[indices1]
muestra_coquimbo <- datos1$r16e[indices2]
R = 5000
contrastar_hipotesis_permutaciones(muestra_metropolitana, muestra_coquimbo, repeticiones = R,
FUN = mean, alternative = "two.sided", plot = TRUE,
color = "blue", fill = "blue")
library(dplyr)
library(ggpubr)
archivo = read.csv2("EP08 Datos CASEN 2017.csv", fileEncoding = "latin1")
obtiene_permutacion <- function (i , muestra_1 , muestra_2) {
n_1 <- length ( muestra_1)
combinada <- c ( muestra_1 , muestra_2)
n <- length ( combinada )
permutacion <- sample ( combinada , n , replace = FALSE )
nueva_1 <- permutacion [1: n_1]
nueva_2 <- permutacion [( n_1+1) : n ]
return ( list ( nueva_1 , nueva_2) )
}
calcular_diferencia <- function ( muestras , FUN ) {
muestra_1 <- muestras[[1]]
muestra_2 <- muestras[[2]]
diferencia <- FUN ( muestra_1) - FUN (muestra_2)
return ( diferencia )
}
calcular_valor_p <- function ( distribucion , valor_observado ,
repeticiones , alternative ) {
if ( alternative == " two . sided " ) {
numerador <- sum ( abs ( distribucion ) > abs ( valor_observado ) ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if ( alternative == " greater " ) {
numerador <- sum ( distribucion > valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else {
numerador <- sum ( distribucion < valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return ( valor_p )
}
# Funci ó n para graficar una distribuci ó n .
# Argumentos :
# - distribucion : distribuci ó n nula del estad í stico de inter é s .
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot .
graficar_distribucion <- function ( distribucion , ...) {
observaciones <- data.frame( distribucion )
histograma <- gghistogram( observaciones , x = " distribucion " ,
xlab = " Estad í stico de inter é s " ,
ylab = " Frecuencia " , bins = 30 , ...)
qq <- ggqqplot( observaciones , x = " distribucion " , ...)
# Crear una ú nica figura con todos los gr á ficos de dispersi ó n .
figura <- ggarrange ( histograma , qq , ncol = 2 , nrow = 1)
print ( figura )
}
# Funci ó n para hacer la prueba de permutaciones .
# Argumentos :
# - muestra _1 , muestra _2: vectores num é ricos con las muestras a comparar .
# - repeticiones : cantidad de permutaciones a realizar .
# - FUN : funci ó n del estad í stico E para el que se calcula la diferencia .
# - alternative : tipo de hip ó tesis alternativa . " two . sided " para
# hip ó tesis bilateral , " greater " o " less " para hip ó tesis unilaterales .
# - plot : si es TRUE , construye el gr á fico de la distribuci ó n generada .
# - ...: otros argumentos a ser entregados a graficar _ distribucion .
contrastar_hipotesis_permutaciones <- function ( muestra_1 , muestra_2 ,
repeticiones , FUN ,
alternative , plot , ...) {
cat ( " Prueba de permutaciones \ n \ n " )
cat ( " Hip ó tesis alternativa : " , alternative , " \ n " )
observado <- calcular_diferencia ( list ( muestra_1 , muestra_2) , FUN )
cat ( " Valor observado : " , observado , " \ n " )
n_1 <- length ( muestra_1)
# Generar permutaciones .
permutaciones <- lapply (1: repeticiones , obtiene_permutacion , muestra_1 ,
muestra_2)
# Generar la distribuci ó n .
distribucion <- sapply ( permutaciones , calcular_diferencia , FUN )
# Graficar la distribuci ó n .
if ( plot ) {
graficar_distribucion ( distribucion , ...)
}
# Calcular el valor p .
valor_p <- calcular_valor_p ( distribucion , observado , repeticiones ,
alternative )
cat ( " Valor p : " , valor_p , " \ n \ n " )
}
datos1 <- archivo %>% filter(edad > 18 & edad < 30)
datos1 <- datos1 %>% filter(r16e == "Sí" | r16e == "No")
datos_metropolitana <-datos1 %>% filter(region == "Región Metropolitana de Santiago")
datos_coquimbo <- datos1 %>% filter(region == "Región de Coquimbo")
set.seed(123)
indices1 <- sample(1:424, 140)
indices2 <- sample(1:189, 140)
muestra_metropolitana <- datos1$r16e[indices1]
muestra_coquimbo <- datos1$r16e[indices2]
R = 5000
contrastar_hipotesis_permutaciones(muestra_metropolitana, muestra_coquimbo, repeticiones = R,
FUN = mean, alternative = "two.sided", plot = TRUE,
color = "blue", fill = "blue")
mean(muestra_coquimbo)
muestra_metropolitana <- ifelse(datos1$r16e[indices1] == "Si", 1, 0)
muestra_coquimbo <- ifelse(datos1$r16e[indices2] == "Si", 1, 0)
R = 5000
contrastar_hipotesis_permutaciones(muestra_metropolitana, muestra_coquimbo, repeticiones = R,
FUN = mean, alternative = "two.sided", plot = TRUE,
color = "blue", fill = "blue")
muestra_metropolitana <- ifelse(datos1$r16e[indices1] == "Sí", 1, 0)
muestra_coquimbo <- ifelse(datos1$r16e[indices2] == "Sí", 1, 0)
R = 5000
contrastar_hipotesis_permutaciones(muestra_metropolitana, muestra_coquimbo, repeticiones = R,
FUN = mean, alternative = "two.sided", plot = TRUE,
color = "blue", fill = "blue")
mean(muestra_coquimbo)
cat ( " Valor p : " , valor_p , " \ n \ n " )
library(dplyr)
library(ggpubr)
archivo = read.csv2("EP08 Datos CASEN 2017.csv", fileEncoding = "latin1")
obtiene_permutacion <- function (i , muestra_1 , muestra_2) {
n_1 <- length( muestra_1)
combinada <- c( muestra_1 , muestra_2)
n <- length( combinada )
permutacion <- sample( combinada , n , replace = FALSE )
nueva_1 <- permutacion[1: n_1]
nueva_2 <- permutacion[( n_1+1) : n ]
return( list( nueva_1 , nueva_2) )
}
calcular_diferencia <- function( muestras , FUN ) {
muestra_1 <- muestras[[1]]
muestra_2 <- muestras[[2]]
diferencia <- FUN( muestra_1) - FUN(muestra_2)
return ( diferencia )
}
calcular_valor_p <- function( distribucion , valor_observado ,
repeticiones , alternative ) {
if ( alternative == " two . sided " ) {
numerador <- sum ( abs ( distribucion ) > abs ( valor_observado ) ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if ( alternative == " greater " ) {
numerador <- sum ( distribucion > valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else {
numerador <- sum ( distribucion < valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return ( valor_p )
}
# Funci ó n para graficar una distribuci ó n .
# Argumentos :
# - distribucion : distribuci ó n nula del estad í stico de inter é s .
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot .
graficar_distribucion <- function ( distribucion , ...) {
observaciones <- data.frame( distribucion )
histograma <- gghistogram( observaciones , x = " distribucion " ,
xlab = " Estad í stico de inter é s " ,
ylab = " Frecuencia " , bins = 30 , ...)
qq <- ggqqplot( observaciones , x = " distribucion " , ...)
# Crear una ú nica figura con todos los gr á ficos de dispersi ó n .
figura <- ggarrange ( histograma , qq , ncol = 2 , nrow = 1)
print ( figura )
}
# Funci ó n para hacer la prueba de permutaciones .
# Argumentos :
# - muestra _1 , muestra _2: vectores num é ricos con las muestras a comparar .
# - repeticiones : cantidad de permutaciones a realizar .
# - FUN : funci ó n del estad í stico E para el que se calcula la diferencia .
# - alternative : tipo de hip ó tesis alternativa . " two . sided " para
# hip ó tesis bilateral , " greater " o " less " para hip ó tesis unilaterales .
# - plot : si es TRUE , construye el gr á fico de la distribuci ó n generada .
# - ...: otros argumentos a ser entregados a graficar _ distribucion .
contrastar_hipotesis_permutaciones <- function ( muestra_1 , muestra_2 ,
repeticiones , FUN ,
alternative , plot , ...) {
cat ( "Prueba de permutaciones \n \n " )
cat ( "Hipótesis alternativa : " , alternative , " \n " )
observado <- calcular_diferencia ( list ( muestra_1 , muestra_2) , FUN )
cat ( " Valor observado : " , observado , " \n " )
n_1 <- length ( muestra_1)
# Generar permutaciones .
permutaciones <- lapply(1: repeticiones , obtiene_permutacion , muestra_1 ,
muestra_2)
# Generar la distribuci ó n .
distribucion <- sapply ( permutaciones , calcular_diferencia , FUN )
# Graficar la distribuci ó n .
if ( plot ) {
graficar_distribucion ( distribucion , ...)
}
# Calcular el valor p .
valor_p <- calcular_valor_p ( distribucion , observado , repeticiones ,
alternative )
cat ( " Valor p : " , valor_p , " \ n \ n " )
}
datos1 <- archivo %>% filter(edad > 18 & edad < 30)
datos1 <- datos1 %>% filter(r16e == "Sí" | r16e == "No")
datos_metropolitana <-datos1 %>% filter(region == "Región Metropolitana de Santiago")
datos_coquimbo <- datos1 %>% filter(region == "Región de Coquimbo")
set.seed(123)
indices1 <- sample(1:424, 140)
indices2 <- sample(1:189, 140)
muestra_metropolitana <- ifelse(datos1$r16e[indices1] == "Sí", 1, 0)
muestra_coquimbo <- ifelse(datos1$r16e[indices2] == "Sí", 1, 0)
R = 5000
contrastar_hipotesis_permutaciones(muestra_metropolitana, muestra_coquimbo, repeticiones = R,
FUN = mean, alternative = "two.sided", plot = TRUE,
color = "blue", fill = "blue")
sapply(1:5000, obtiene_permutacion, muestra_coquimbo, muestra_metropolitana)
obtiene_permutacion(10, 1:10, 1:10)
obtiene_permutacion(100, 1:10, 1:10)
obtiene_permutacion(100, 1:100, 1:100)
sapply(1:10, obtiene_permutacion, muestra_coquimbo, muestra_metropolitana)
lapply(1:10, obtiene_permutacion, muestra_coquimbo, muestra_metropolitana)
lapply(1:2, obtiene_permutacion, muestra_coquimbo, muestra_metropolitana)
lapply(1:3, obtiene_permutacion, muestra_coquimbo, muestra_metropolitana)
permutaciones <- lapply(1:3, obtiene_permutacion, muestra_coquimbo, muestra_metropolitana)
sapply(permutaciones, calcular_diferencia, mean)
permutaciones <- lapply(1:5000, obtiene_permutacion, muestra_coquimbo, muestra_metropolitana)
sapply(permutaciones, calcular_diferencia, mean)
FUN <- mean
sapply(permutaciones, calcular_diferencia, FUN)
contrastar_hipotesis_permutaciones(muestra_metropolitana, muestra_coquimbo, repeticiones = R,
FUN = mean, alternative = "two.sided", plot = TRUE,
color = "blue", fill = "blue")
library(dplyr)
library(ggpubr)
archivo = read.csv2("EP08 Datos CASEN 2017.csv", fileEncoding = "latin1")
obtiene_permutacion <- function (i , muestra_1 , muestra_2) {
n_1 <- length( muestra_1)
combinada <- c( muestra_1 , muestra_2)
n <- length( combinada )
permutacion <- sample( combinada , n , replace = FALSE )
nueva_1 <- permutacion[1: n_1]
nueva_2 <- permutacion[( n_1+1) : n ]
return( list( nueva_1 , nueva_2) )
}
calcular_diferencia <- function( muestras , FUN ) {
muestra_1 <- muestras[[1]]
muestra_2 <- muestras[[2]]
diferencia <- FUN( muestra_1) - FUN(muestra_2)
return ( data.frame(distribucion = diferencia) )
}
calcular_valor_p <- function( distribucion , valor_observado ,
repeticiones , alternative ) {
if ( alternative == " two . sided " ) {
numerador <- sum ( abs ( distribucion ) > abs ( valor_observado ) ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else if ( alternative == " greater " ) {
numerador <- sum ( distribucion > valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
else {
numerador <- sum ( distribucion < valor_observado ) + 1
denominador <- repeticiones + 1
valor_p <- numerador / denominador
}
return ( valor_p )
}
# Funci ó n para graficar una distribuci ó n .
# Argumentos :
# - distribucion : distribuci ó n nula del estad í stico de inter é s .
# - ...: otros argumentos a ser entregados a gghistogram y ggqqplot .
graficar_distribucion <- function ( distribucion , ...) {
observaciones <- data.frame( distribucion )
histograma <- gghistogram( observaciones , x = " distribucion " ,
xlab = " Estad í stico de inter é s " ,
ylab = " Frecuencia " , bins = 30 , ...)
qq <- ggqqplot( observaciones , x = " distribucion " , ...)
# Crear una ú nica figura con todos los gr á ficos de dispersi ó n .
figura <- ggarrange ( histograma , qq , ncol = 2 , nrow = 1)
print ( figura )
}
# Función para hacer la prueba de permutaciones .
# Argumentos :
# - muestra _1 , muestra _2: vectores num é ricos con las muestras a comparar .
# - repeticiones : cantidad de permutaciones a realizar .
# - FUN : funci ó n del estad í stico E para el que se calcula la diferencia .
# - alternative : tipo de hip ó tesis alternativa . " two . sided " para
# hip ó tesis bilateral , " greater " o " less " para hip ó tesis unilaterales .
# - plot : si es TRUE , construye el gr á fico de la distribuci ó n generada .
# - ...: otros argumentos a ser entregados a graficar _ distribucion .
contrastar_hipotesis_permutaciones <- function ( muestra_1 , muestra_2 ,
repeticiones , FUN ,
alternative , plot , ...) {
cat ( "Prueba de permutaciones \n \n " )
cat ( "Hipótesis alternativa : " , alternative , " \n " )
observado <- calcular_diferencia ( list ( muestra_1 , muestra_2) , FUN )
cat ( "Valor observado : " , observado , " \n " )
n_1 <- length ( muestra_1)
# Generar permutaciones .
permutaciones <- lapply(1:repeticiones , obtiene_permutacion , muestra_1 ,
muestra_2)
# Generar la distribuci ó n .
distribucion <- sapply( permutaciones , calcular_diferencia , FUN )
# Graficar la distribuci ó n .
if ( plot ) {
graficar_distribucion ( distribucion , ...)
}
# Calcular el valor p .
valor_p <- calcular_valor_p ( distribucion , observado , repeticiones ,
alternative )
cat ( " Valor p : " , valor_p , " \ n \ n " )
}
datos1 <- archivo %>% filter(edad > 18 & edad < 30)
datos1 <- datos1 %>% filter(r16e == "Sí" | r16e == "No")
datos_metropolitana <-datos1 %>% filter(region == "Región Metropolitana de Santiago")
datos_coquimbo <- datos1 %>% filter(region == "Región de Coquimbo")
set.seed(123)
indices1 <- sample(1:424, 140)
indices2 <- sample(1:189, 140)
muestra_metropolitana <- ifelse(datos1$r16e[indices1] == "Sí", 1, 0)
muestra_coquimbo <- ifelse(datos1$r16e[indices2] == "Sí", 1, 0)
R = 5000
contrastar_hipotesis_permutaciones(muestra_metropolitana, muestra_coquimbo, repeticiones = R,
FUN = mean, alternative = "two.sided", plot = TRUE,
color = "blue", fill = "blue")
