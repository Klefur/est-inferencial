setwd("~/Escritorio/Code/est-inferencial/E10")
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
muestra <- c(sobrepeso[sample(nrow(sobrepeso), 45), ], normal)
View(mujeres)
View(muestra)
muestra <-as.data.frame(c(sobrepeso[sample(nrow(sobrepeso), 45), ], normal))
muestra <-as.data.frame(c(sobrepeso[sample(nrow(sobrepeso), 45), ] + normal))
muestra <-as.data.frame(c(sobrepeso[sample(nrow(sobrepeso), 45), ] + normal))
muestra <- merge(x = sobrepeso[sample(nrow(sobrepeso), 45), ], y = normal, all = TRUE)
View(muestra)
muestra90 <- merge(x = sobrepeso[sample(nrow(sobrepeso), 45), ], y = normal, all = TRUE)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
muestra90 <- merge(x = sobrepeso[sample(nrow(sobrepeso), 45), ], y = normal, all = TRUE)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
sobrepeso45 <- sobrepeso[sample(nrow(sobrepeso), 45), ]
sobrepeso30 <- sobrepeso45[1:30, ]
sobrepeso15 <- sobrepeso45[31:45, ]
normal30 <- normal[1:30, ]
normal15 <- normal[31:45, ]
muestra60 <- merge(x = sobrepeso30, y = normal30, all = TRUE)
muestra30 <- merge(x = sobrepeso15, y = normal15, all = TRUE)
View(archivo)
entrenamiento <- merge(x = sobrepeso30, y = normal30, all = TRUE)
prueba <- merge(x = sobrepeso15, y = normal15, all = TRUE)
modelo <- glm(EN~Chest.Girth, family = binomial(link = "logit"), data = entrenamiento )
print(summary(modelo))
# Evaluar el modelo con el conjunto de entrenamiento .
cat("Evaluación del modelo a partir del conjunto de entrenamiento:\n" )
probs_e <- predict( modelo, entrenamiento, type="response")
umbral <- 0.5
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(datos [["Chest.Girth"]]) )
View(archivo)
preds_e <- factor(preds_e , levels=levels(archivo[["Chest.Girth"]]) )
ROC_e <- roc(entrenamiento[["Chest.Girth"]] , probs_e)
library(pROC)
install.packages("pROC")
ROC_e <- roc(entrenamiento[["Chest.Girth"]] , probs_e)
library(pROC)
ROC_e <- roc(entrenamiento[["Chest.Girth"]] , probs_e)
plot(ROC_e)
library(pROC)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
sobrepeso45 <- sobrepeso[sample(nrow(sobrepeso), 45), ]
sobrepeso30 <- sobrepeso45[1:30, ]
sobrepeso15 <- sobrepeso45[31:45, ]
normal30 <- normal[1:30, ]
normal15 <- normal[31:45, ]
entrenamiento <- merge(x = sobrepeso30, y = normal30, all = TRUE)
prueba <- merge(x = sobrepeso15, y = normal15, all = TRUE)
modelo <- glm(EN~Chest.Girth, family = binomial(link = "logit"), data = entrenamiento )
print(summary(modelo))
# Evaluar el modelo con el conjunto de entrenamiento .
cat("Evaluación del modelo a partir del conjunto de entrenamiento:\n" )
probs_e <- predict( modelo, entrenamiento, type="response")
umbral <- 0.5
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(archivo[["EN"]]) )
ROC_e <- roc(entrenamiento[["EN"]] , probs_e)
plot(ROC_e)
matriz_e <- confusionMatrix (preds_e, entrenamiento[["EN"]])
print(matriz_e)
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
library(caret)
install.packages(carot)
install.packages(caret)
install.packages("caret")
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
library(caret)
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
print(matriz_e)
# Evaluar el modelo con el conjunto de prueba .
cat("Evaluación del modelo a partir del conjunto de prueba :\n")
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
library(pROC)
library(caret)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
sobrepeso45 <- sobrepeso[sample(nrow(sobrepeso), 45), ]
sobrepeso30 <- sobrepeso45[1:30, ]
sobrepeso15 <- sobrepeso45[31:45, ]
normal30 <- normal[1:30, ]
normal15 <- normal[31:45, ]
entrenamiento <- merge(x = sobrepeso30, y = normal30, all = TRUE)
prueba <- merge(x = sobrepeso15, y = normal15, all = TRUE)
modelo <- glm(EN~Chest.Girth, family = binomial(link = "logit"), data = entrenamiento )
print(summary(modelo))
# Evaluar el modelo con el conjunto de entrenamiento .
cat("Evaluación del modelo a partir del conjunto de entrenamiento:\n" )
probs_e <- predict( modelo, entrenamiento, type="response")
umbral <- 0.5
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(archivo[["EN"]]) )
ROC_e <- roc(entrenamiento[["EN"]] , probs_e)
plot(ROC_e)
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
print(matriz_e)
# Evaluar el modelo con el conjunto de prueba .
cat("Evaluación del modelo a partir del conjunto de prueba :\n")
probs_p <- predict(modelo, prueba, type = "response")
library(pROC)
library(caret)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
sobrepeso45 <- sobrepeso[sample(nrow(sobrepeso), 45), ]
sobrepeso30 <- sobrepeso45[1:30, ]
sobrepeso15 <- sobrepeso45[31:45, ]
normal30 <- normal[1:30, ]
normal15 <- normal[31:45, ]
entrenamiento <- merge(x = sobrepeso30, y = normal30, all = TRUE)
prueba <- merge(x = sobrepeso15, y = normal15, all = TRUE)
modelo <- glm(EN~Chest.Girth, family = binomial(link = "logit"), data = entrenamiento )
print(summary(modelo))
# Evaluar el modelo con el conjunto de entrenamiento .
cat("Evaluación del modelo a partir del conjunto de entrenamiento:\n" )
probs_e <- predict( modelo, entrenamiento, type="response")
umbral <- 0.5
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(archivo[["EN"]]) )
ROC_e <- roc(entrenamiento[["EN"]] , probs_e)
plot(ROC_e)
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
library(pROC)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
sobrepeso45 <- sobrepeso[sample(nrow(sobrepeso), 45), ]
sobrepeso30 <- sobrepeso45[1:30, ]
sobrepeso15 <- sobrepeso45[31:45, ]
normal30 <- normal[1:30, ]
normal15 <- normal[31:45, ]
entrenamiento <- merge(x = sobrepeso30, y = normal30, all = TRUE)
prueba <- merge(x = sobrepeso15, y = normal15, all = TRUE)
modelo <- glm(EN~Chest.Girth, family = binomial(link = "logit"), data = entrenamiento )
print(summary(modelo))
# Evaluar el modelo con el conjunto de entrenamiento .
cat("Evaluación del modelo a partir del conjunto de entrenamiento:\n" )
probs_e <- predict( modelo, entrenamiento, type="response")
umbral <- 0.5
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(archivo[["EN"]]) )
ROC_e <- roc(entrenamiento[["EN"]] , probs_e)
plot(ROC_e)
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
library(pROC)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
sobrepeso45 <- sobrepeso[sample(nrow(sobrepeso), 45), ]
sobrepeso30 <- sobrepeso45[1:30, ]
sobrepeso15 <- sobrepeso45[31:45, ]
normal30 <- normal[1:30, ]
normal15 <- normal[31:45, ]
entrenamiento <- merge(x = sobrepeso30, y = normal30, all = TRUE)
prueba <- merge(x = sobrepeso15, y = normal15, all = TRUE)
modelo <- glm(EN~Chest.Girth, family = binomial(link = "logit"), data = entrenamiento )
print(summary(modelo))
# Evaluar el modelo con el conjunto de entrenamiento .
cat("Evaluación del modelo a partir del conjunto de entrenamiento:\n" )
probs_e <- predict( modelo, entrenamiento, type="response")
umbral <- 0.5
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(archivo[["EN"]]) )
ROC_e <- roc(entrenamiento[["EN"]] , probs_e)
plot(ROC_e)
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
print(matriz_e)
# Evaluar el modelo con el conjunto de prueba .
cat("Evaluación del modelo a partir del conjunto de prueba :\n")
probs_p <- predict(modelo, prueba, type = "response")
preds_p <- sapply( probs_p, function(p) ifelse (p >= umbral, "1", "0"))
preds_p <- factor( preds_p, levels = levels(datos[["EN"]]) )
ROC_p <- roc(prueba[["EN"]], probs_p)
plot(ROC_p)
matriz_p <- confusionMatrix(preds_p, prueba[["EN"]])
print(matriz_p)
library(pROC)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
sobrepeso45 <- sobrepeso[sample(nrow(sobrepeso), 45), ]
sobrepeso30 <- sobrepeso45[1:30, ]
sobrepeso15 <- sobrepeso45[31:45, ]
normal30 <- normal[1:30, ]
normal15 <- normal[31:45, ]
entrenamiento <- merge(x = sobrepeso30, y = normal30, all = TRUE)
prueba <- merge(x = sobrepeso15, y = normal15, all = TRUE)
modelo <- glm(EN~Chest.Girth, family = binomial(link = "logit"), data = entrenamiento )
print(summary(modelo))
# Evaluar el modelo con el conjunto de entrenamiento .
cat("Evaluación del modelo a partir del conjunto de entrenamiento:\n" )
probs_e <- predict( modelo, entrenamiento, type="response")
umbral <- 0.5
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(archivo[["EN"]]) )
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(archivo[["EN"]]) )
preds_p <- sapply( probs_p, function(p) ifelse (p >= umbral, "1", "0"))
preds_p <- factor( preds_p, levels = levels(archivo[["EN"]]))
preds_p <- sapply( probs_p, function(p) ifelse (p >= umbral, "1", "0"))
probs_p <- predict(modelo, prueba, type = "response")
preds_p <- sapply( probs_p, function(p) ifelse (p >= umbral, "1", "0"))
preds_p <- factor( preds_p, levels = levels(archivo[["EN"]]))
preds_p <- sapply( probs_p, function(p) ifelse (p >= umbral, "1", "0"))
preds_p <- factor( preds_p, levels = levels(archivo[["EN"]]))
levels(archivo[["EN"]]
levels(archivo[["EN"]]
View(archivo)
View(archivo)
library(pROC)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
sobrepeso45 <- sobrepeso[sample(nrow(sobrepeso), 45), ]
sobrepeso30 <- sobrepeso45[1:30, ]
sobrepeso15 <- sobrepeso45[31:45, ]
normal30 <- normal[1:30, ]
normal15 <- normal[31:45, ]
entrenamiento <- merge(x = sobrepeso30, y = normal30, all = TRUE)
prueba <- merge(x = sobrepeso15, y = normal15, all = TRUE)
modelo <- glm(EN~Chest.Girth, family = binomial(link = "logit"), data = entrenamiento )
print(summary(modelo))
# Evaluar el modelo con el conjunto de entrenamiento .
cat("Evaluación del modelo a partir del conjunto de entrenamiento:\n" )
probs_e <- predict( modelo, entrenamiento, type="response")
umbral <- 0.5
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(archivo[["EN"]]) )
archivo[["EN"]]
levels(archivo)
levels(archivo$EN)
levels(archivo[["EN"]])
View(entrenamiento)
View(entrenamiento)
library(pROC)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- factor(archivo$Weight / archivo$Height^2)
archivo$EN <- factor(ifelse(archivo$IMC < 25, 1, 0))
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
archivo$EN <- factor(archivo$EN)
library(pROC)
archivo <- read.csv2("EP09 Datos.csv")
archivo$Height <- archivo$Height / 100
archivo$IMC <- archivo$Weight / archivo$Height^2
archivo$EN <- ifelse(archivo$IMC < 25, 1, 0)
archivo$EN <- factor(archivo$EN)
set.seed(7708)
mujeres <- archivo[archivo$Gender == 0, ]
mujeres
sobrepeso <- mujeres[mujeres$EN == 1, ]
normal <- mujeres[mujeres$EN == 0, ]
sobrepeso45 <- sobrepeso[sample(nrow(sobrepeso), 45), ]
sobrepeso30 <- sobrepeso45[1:30, ]
sobrepeso15 <- sobrepeso45[31:45, ]
normal30 <- normal[1:30, ]
normal15 <- normal[31:45, ]
entrenamiento <- merge(x = sobrepeso30, y = normal30, all = TRUE)
prueba <- merge(x = sobrepeso15, y = normal15, all = TRUE)
modelo <- glm(EN~Chest.Girth, family = binomial(link = "logit"), data = entrenamiento )
print(summary(modelo))
# Evaluar el modelo con el conjunto de entrenamiento .
cat("Evaluación del modelo a partir del conjunto de entrenamiento:\n" )
probs_e <- predict( modelo, entrenamiento, type="response")
umbral <- 0.5
preds_e <- sapply(probs_e , function(p) ifelse(p >= umbral, "1" , "0" ))
preds_e <- factor(preds_e , levels=levels(archivo[["EN"]]))
ROC_e <- roc(entrenamiento[["EN"]] , probs_e)
plot(ROC_e)
matriz_e <- confusionMatrix(preds_e, entrenamiento[["EN"]])
print(matriz_e)
# Evaluar el modelo con el conjunto de prueba .
cat("Evaluación del modelo a partir del conjunto de prueba :\n")
probs_p <- predict(modelo, prueba, type = "response")
preds_p <- sapply( probs_p, function(p) ifelse (p >= umbral, "1", "0"))
preds_p <- factor( preds_p, levels = levels(archivo[["EN"]]))
ROC_p <- roc(prueba[["EN"]], probs_p)
plot(ROC_p)
matriz_p <- confusionMatrix(preds_p, prueba[["EN"]])
print(matriz_p)
